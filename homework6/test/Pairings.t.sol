// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console} from "forge-std/Test.sol";
import {Pairings, G1Point, G2Point} from "../src/Pairings.sol";

contract PairingsTest is Test {
    Pairings public pairings;

    function setUp() public {
        pairings = new Pairings();
    }

    function test_shouldVerifyPairingTrue() public view {
        // X1
        uint256 x1 = 25;
        uint256 x2 = 2;
        uint256 x3 = 8;

        // A = 101 * G1
        G1Point memory A = G1Point(
            101736474863018474486226188821757310196822904661437109985129121643628477843,
            20809165444309486437598143500680353367168077151871577252054480771838214401340
        );
        // B = 5 * G2
        G2Point memory B = G2Point(
            4540444681147253467785307942530223364530218361853237193970751657229138047649,
            20954117799226682825035885491234530437475518021362091509513177301640194298072,
            11631839690097995216017572651900167465857396346217730511548857041925508482915,
            21508930868448350162258892668132814424284302804699005394342512102884055673846
        );
        G1Point memory C = G1Point(
            15630250211619345980264659554171089045460684386745982646195304578474625146473,
            13597371564520873079214108010918820572395693243527082948219837354327653001066
        );
        bool result = pairings.verify(A, B, C, x1, x2, x3);
        assert(result);
    }

    function test_shouldVerifyPairingFalse() public view {
        // X1
        uint256 x1 = 25;
        uint256 x2 = 2;
        uint256 x3 = 8;
        // A = 102
        G1Point memory A = G1Point(
            11897101168971970088276358574215532691684044403008986918795366111346914161472,
            15115312584169577933513770345891256781683450185624326015593685516146581184653
        );
        // B = 5 * G2
        G2Point memory B = G2Point(
            4540444681147253467785307942530223364530218361853237193970751657229138047649,
            20954117799226682825035885491234530437475518021362091509513177301640194298072,
            11631839690097995216017572651900167465857396346217730511548857041925508482915,
            21508930868448350162258892668132814424284302804699005394342512102884055673846
        );
        G1Point memory C = G1Point(
            15630250211619345980264659554171089045460684386745982646195304578474625146473,
            13597371564520873079214108010918820572395693243527082948219837354327653001066
        );
        bool result = pairings.verify(A, B, C, x1, x2, x3);
        assertFalse(result);
    }

    function test_shouldVerifyPairingTrueWithZeroCoefficients() public view {
        // X1
        uint256 x1 = 0;
        uint256 x2 = 0;
        uint256 x3 = 0;

        // A = 85 * G1
        G1Point memory A = G1Point(
            17990338800136330219282030132013276894006083605897860662265286903319615807158,
            3289917882057076627927906556860231277487594098124155054955738043890261042492
        );

        // B = 1 * G2
        G2Point memory B = G2Point(
            11559732032986387107991004021392285783925812861821192530917403151452391805634,
            10857046999023057135944570762232829481370756359578518086990519993285655852781,
            4082367875863433681332203403145435568316851327593401208105741076214120093531,
            8495653923123431417604973247489272438418190587263600148770280649306958101930
        );
        // C = 0 * G1
        G1Point memory C = G1Point(0, 0);
        bool result = pairings.verify(A, B, C, x1, x2, x3);
        assert(result);
    }
}
